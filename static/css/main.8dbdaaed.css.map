{"version":3,"file":"static/css/main.8dbdaaed.css","mappings":"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A,2BACA,CADA,2BACA,CADA,sBACA,CADA,yBACA,CADA,0BACA,CADA,kBACA,CADA,oBACA,CADA,yBACA,CADA,iBACA,CADA,yBACA,CADA,yBACA,CADA,yBACA,CADA,iBACA,CADA,yBACA,CADA,yBACA,CADA,yBACA,CADA,yBACA,CADA,yBACA,CADA,yBACA,CADA,yBACA,CADA,uBACA,CADA,mBACA,CADA,iBACA,CADA,iCACA,CADA,iCACA,CADA,iCACA,CADA,gBACA,CADA,iBACA,CADA,iBACA,CADA,iBACA,CADA,kBACA,CADA,wBACA,CADA,iBACA,CADA,iBACA,CADA,qBACA,CADA,wBACA,CADA,eACA,CADA,qBACA,CADA,wBACA,CADA,wBACA,CADA,qBACA,CADA,kBACA,CADA,gBACA,CADA,gFACA,CADA,4BACA,CADA,iDACA,CADA,0BACA,CADA,4CACA,CADA,uBACA,EADA,wEACA,CADA,4BACA,CADA,iDACA,CADA,0BACA,CADA,4CACA,CADA,uBACA,EADA,wDACA,CADA,4BACA,CADA,sFACA,CADA,2BACA,CADA,kDACA,CADA,2BACA,CADA,4CACA,CADA,uBACA,EADA,8EACA,CADA,2BACA,CADA,kDACA,CADA,2BACA,CADA,4CACA,CADA,uBACA,EADA,sEACA,CADA,mCACA,CADA,sFACA,CADA,2BACA,CADA,kDACA,CADA,2BACA,CADA,4CACA,CADA,uBACA,EADA,8EACA,CADA,2BACA,CADA,kDACA,CADA,2BACA,CADA,4CACA,CADA,uBACA,EADA,sEACA,CADA,mCACA,CADA,iEACA,CADA,0BACA,CADA,uDACA,CADA,2CACA,CADA,uDACA,CADA,2CACA,CADA,uDACA,CADA,2CACA,CADA,qCACA,CADA,0BACA,EADA,yDACA,CADA,0BACA,CADA,uDACA,CADA,2CACA,CADA,uDACA,CADA,2CACA,CADA,uDACA,CADA,2CACA,CADA,qCACA,CADA,0BACA,EADA,+DACA,CADA,qCACA,CADA,wFACA,CADA,mFACA,CADA,0BACA,CADA,4DACA,CADA,uEACA,CADA,cACA,EADA,gFACA,CADA,mFACA,CADA,0BACA,CADA,4DACA,CADA,uEACA,CADA,cACA,EADA,oDACA,CADA,4BACA,CADA,gFACA,CADA,4BACA,CADA,iDACA,CADA,0BACA,CADA,4CACA,CADA,uBACA,EADA,wEACA,CADA,4BACA,CADA,iDACA,CADA,0BACA,CADA,4CACA,CADA,uBACA,EADA,wDACA,CADA,4BACA,CADA,kEACA,CADA,4BACA,CADA,kCACA,CADA,uBACA,EADA,0DACA,CADA,4BACA,CADA,kCACA,CADA,uBACA,EADA,yDACA,CADA,gCACA,CADA,8BACA,CADA,qCACA,CADA,gBACA,CADA,+BACA,CADA,+BACA,CADA,yBACA,CADA,mCACA,CADA,gCACA,CADA,yCACA,CADA,sCACA,CADA,8CACA,CADA,4CACA,CADA,4CACA,CADA,gCACA,CADA,oCACA,CADA,qCACA,CADA,kCACA,CADA,+BACA,CADA,+BACA,CADA,gCACA,CADA,iCACA,CADA,wBACA,CADA,0BACA,CADA,gCACA,CADA,8BACA,CADA,mCACA,CADA,gDACA,CADA,wCACA,CADA,oDACA,CADA,8BACA,CADA,oDACA,CADA,2BACA,CADA,sDACA,CADA,6FACA,CADA,oFACA,CADA,wCACA,CADA,iCACA,CADA,iEACA,CADA,yCACA,CADA,mCACA,CADA,iEACA,CADA,yCACA,CADA,kCACA,CADA,iEACA,CADA,yCACA,CADA,kCACA,CADA,iEACA,CADA,oCACA,CADA,qCACA,CADA,qCACA,CADA,uCACA,CADA,8BACA,CADA,oBACA,CADA,mBACA,CADA,kBACA,CADA,iBACA,CADA,kBACA,CADA,wBACA,CADA,0CACA,CADA,yBACA,CADA,wBACA,CADA,yBACA,CADA,0BACA,CADA,0BACA,CADA,8BACA,CADA,4BACA,CADA,2BACA,CADA,kBACA,CADA,2BACA,CADA,qCACA,CADA,0BACA,CADA,0BACA,CADA,gBACA,CADA,4BA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DA,6CA6hBgB,gBA9hBhB,0DAEA,+BADA,6CA6hBgB,eA9hBhB,yDAEA,+BADA,6CA6hBgB,cA9hBhB,wDAEA,+BADA,6CA6hBgB,aA9hBhB,uDAEA,8BADA,6CA6hBgB,YA9hBhB,sDAEA,kBADA,6CAujBoB,WAxjBpB,qDAEA,mCAkkBI,IACI,wBACI,EApkBZ,yBAkkBI,IACI,wBACI,EDjoBhB,mD,CEAA,yDFAA,mY,CEAA,6BFAA,sB,CEAA,uBFAA,iC,CEAA,+CFAA,mY,CEAA,wBFAA,iC,CEAA,0BFAA,8C,CEAA,gBFAA,W,CEAA,iBFAA,Y,CEAA,YFAA,U,CEAA,gBFAA,S,CEAA,iBFAA,W,CEAA,gBFAA,S,CEAA,gBFAA,U,CEAA,gBFAA,S,CEAA,oBFAA,sB,CEAA,UFAA,sC,CEAA,UFAA,iB,CEAA,UFAA,oB,CEAA,cFAA,sC,CEAA,eFAA,iC,CEAA,cFAA,4B,CEAA,aFAA,sC,EEAA,0BFAA,6B,CEAA,iBFAA,Y,CEAA,gBFAA,S,CEAA,YFAA,U,CEAA,iBFAA,W,EEAA,yBFAA,6B,CEAA,WFAA,kB,CEAA,YFAA,Y,CEAA,iBFAA,Y,CEAA,iBFAA,Y,CEAA,gBFAA,S,CEAA,iBFAA,U,CEAA,YFAA,S,CEAA,YFAA,U,CEAA,gBFAA,S,CEAA,gBFAA,S,CEAA,cFAA,qB,CEAA,sBFAA,6B,CEAA,kBFAA,kB,CEAA,oBFAA,sB,CEAA,UFAA,sC,CEAA,aFAA,qC,CEAA,eFAA,iC,CEAA,aFAA,sC,EEAA,yBFAA,6B,CEAA,UFAA,kB,CEAA,UFAA,e,CEAA,iBFAA,kB,CEAA,kBFAA,gB,CEAA,WFAA,e,CEAA,UFAA,kB,CEAA,YFAA,Y,CEAA,iBFAA,Y,CEAA,iBFAA,Y,CEAA,iBFAA,Y,CEAA,iBFAA,Y,CEAA,gBFAA,S,CEAA,gBFAA,S,CEAA,iBFAA,W,CEAA,iBFAA,W,CEAA,YFAA,U,CEAA,cFAA,qB,CEAA,SFAA,S,CEAA,SFAA,a,CEAA,SFAA,Y,CEAA,iBFAA,iB,CEAA,cFAA,oC,CEAA,aFAA,qC,CEAA,eFAA,iC,CEAA,sBFAA,gB","sources":["App.scss","typed.scss","../<no source>"],"sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');\r\n@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap');\r\n\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n@import 'typed';\r\n\r\n* {\r\n    // font-family: 'Open Sans', sans-serif;\r\n    font-family: 'Quicksand', sans-serif;\r\n}\r\n\r\nbody {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.typing {\r\n    @include typed(\"I'm Huy (Cabbage), Front-End Developer\",\r\n        1.5,\r\n        (caret-width: 2px, caret-space: 2px));\r\n}","$__typed-pauses-chars: (\r\n    fwd: \"\\200b\",\r\n    bwd: \"\\200c\",\r\n    both: \"\\feff\"\r\n);\r\n\r\n@function __typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $string-nth, $char-nth, $modifier) {\r\n    $string: nth($strings, $string-nth);\r\n    $length: str-length($string);\r\n    $fwd-string: __typed-remove-bwd-pause-chars($string);\r\n    $fwd-length: str-length($fwd-string);\r\n    $bwd-string: __typed-remove-fwd-pause-chars($string);\r\n    $bwd-length: str-length($bwd-string);\r\n    $combined-length: $fwd-length +$bwd-length;\r\n    $strings-past: $string-nth - 1;\r\n    $time: 0;\r\n\r\n    @while $strings-past >0 {\r\n        $past-string: nth($strings, $strings-past);\r\n        $past-length: str-length($past-string);\r\n        $past-fwd-length: str-length(__typed-remove-bwd-pause-chars($past-string));\r\n        $past-bwd-length: str-length(__typed-remove-fwd-pause-chars($past-string));\r\n        $time: $time +$dur-char-fwd * $past-fwd-length +$dur-char-bwd * $past-bwd-length +$dur-full-gap +$dur-done-gap;\r\n        $strings-past: $strings-past - 1;\r\n    }\r\n\r\n    @if $char-nth <=$fwd-length {\r\n        $time: $time +$dur-char-fwd * ($char-nth - 1);\r\n    }\r\n\r\n    @else {\r\n        $time: $time +$dur-char-fwd * $fwd-length +$dur-full-gap +$dur-char-bwd * ($char-nth - $fwd-length);\r\n    }\r\n\r\n    @return ($time / $dur-total * 100 + $modifier)+\"%\";\r\n}\r\n\r\n@function __typed-get-all-keys($lists...) {\r\n    $all-keys: ();\r\n\r\n    @each $list in $lists {\r\n        @each $map in $list {\r\n            @each $prop in map-keys($map) {\r\n                $all-keys: append($all-keys, $prop, comma);\r\n            }\r\n        }\r\n    }\r\n\r\n    @return $all-keys;\r\n}\r\n\r\n@mixin __typed-write-to-content($string, $alt-text, $prefix: \"\") {\r\n    // @supports (content: \"x\" / \"y\") {\r\n    // \tcontent: $string / \"#{$alt-text}\";\r\n    // }\r\n    // @supports not (content: \"x\" / \"y\") {\r\n    // \tcontent: $string;\r\n    // \talt: \"#{$alt-text}\";\r\n    // }\r\n    content: \"​#{__typed-sanitize-pause-chars($prefix)}#{__typed-sanitize-pause-chars($string)}\";\r\n    content: \"​#{__typed-sanitize-pause-chars($prefix)}#{__typed-sanitize-pause-chars($string)}\" / \"#{__typed-sanitize-pause-chars($alt-text)}\";\r\n    alt: \"#{__typed-sanitize-pause-chars($alt-text)}\";\r\n}\r\n\r\n@mixin __typed-spread-styles($styles: (), $nth: null, $addtl-styles...) {\r\n    @if type-of($styles)==list {\r\n        @if (length($styles) > 0 and $nth  !=null) or length($addtl-styles)>0 {\r\n            $all-props: __typed-get-all-keys($styles, $addtl-styles);\r\n\r\n            @if length($styles)>0 and $nth  !=null {\r\n                $styles: nth($styles, $nth);\r\n            }\r\n\r\n            @if length($addtl-styles)>0 {\r\n                @each $style-group in $addtl-styles {\r\n                    // @error \"#{$style-group}\";\r\n                    $styles: map-merge($styles, $style-group);\r\n                }\r\n            }\r\n\r\n            @each $prop in $all-props {\r\n                $value: if(map-get($styles, $prop)==null, unset, map-get($styles, $prop));\r\n                #{$prop}: if(type-of($value)==list, append($value, null, auto), $value);\r\n            }\r\n        }\r\n    }\r\n\r\n    @else if type-of($styles)==map {\r\n        @if length(map-keys($styles))>0 {\r\n\r\n            @each $prop,\r\n            $value in $styles {\r\n                #{$prop}: if(type-of($value)==list, append($value, null, auto), $value);\r\n            }\r\n        }\r\n    }\r\n\r\n    @else {\r\n        @error \"__typed-spread-styles requires the $styles argument to be either a map or a list of maps.\";\r\n    }\r\n}\r\n\r\n@mixin __typed-final-build-animation($dur-char-fwd, $string, $animation-name, $alt-text, $prefix, $end-styles: (), $styles: ()) {\r\n    @keyframes #{$animation-name}-final {\r\n        @for $i from 1 through str-length($string) {\r\n            $modifier: .001;\r\n\r\n            @if $i ==1 {\r\n                $modifier: 0;\r\n            }\r\n\r\n            #{($i - 1) / str-length($string) * 100 + $modifier}%,\r\n            #{$i / str-length($string) * 100}% {\r\n                @include __typed-write-to-content(str-slice($string, 1, $i), $alt-text, $prefix);\r\n\r\n                @if $i ==str-length($string) {\r\n                    @include __typed-spread-styles(map-merge($styles, $end-styles));\r\n                }\r\n\r\n                @else {\r\n                    @include __typed-spread-styles($styles);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@function __typed-instances-of($data, $search) {\r\n    $instances: 0;\r\n\r\n    @if type-of($data)==list or type-of($data)==map {\r\n        @each $item in $data {\r\n            @if $item ==$search {\r\n                $instances: $instances +1;\r\n            }\r\n        }\r\n    }\r\n\r\n    @else if type-of($data)==string {\r\n        @if type-of($search) !=string {\r\n            @error \"When searching a string using instances-of, your search argument must also be a string.\";\r\n        }\r\n\r\n        @if str-length($search) < 1 {\r\n            @error \"When searching a string using instances-of, your search string must be at least one character in length.\";\r\n        }\r\n\r\n        @for $i from 1 through str-length($data) - str-length($search)+1 {\r\n            @if str-slice($data, $i, $i + str-length($search) - 1)==$search {\r\n                $instances: $instances +1;\r\n            }\r\n        }\r\n    }\r\n\r\n    @else {\r\n        @error \"instances-of requires one parameter of type map, list, or string, and a second argument of the value searching for within that data.\";\r\n    }\r\n\r\n    @return $instances;\r\n}\r\n\r\n@function __typed-instances-of-not($data, $search) {\r\n    @if type-of($data)==list or type-of($data)==map {\r\n        @return length($data) - __typed-instances-of($data, $search);\r\n    }\r\n\r\n    @else if type-of($data)==string {\r\n        @return str-length($data) - __typed-instances-of($data, $search);\r\n    }\r\n\r\n    @else {\r\n        @error \"instances-of requires one parameter of type map, list, or string, and a second argument of the value searching for within that data.\";\r\n    }\r\n}\r\n\r\n// ...\r\n//\r\n// CREDIT BEGIN :: aliased str-replace/to-length/to-number functions are courtesy of Kitty Giraudel (kittygiraudel.com)\r\n@function __typed-str-replace($string, $search, $replace: \"\") {\r\n    $index: str-index($string, $search);\r\n\r\n    @if $index {\r\n        @return str-slice($string, 1, $index - 1)+$replace +__typed-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n    }\r\n\r\n    @return $string;\r\n}\r\n\r\n@function __typed-to-length($value, $unit) {\r\n    $units: (\"px\": 1px, \"cm\": 1cm, \"mm\": 1mm, \"%\": 1%, \"ch\": 1ch, \"pc\": 1pc, \"in\": 1in, \"em\": 1em, \"rem\": 1rem, \"pt\": 1pt, \"ex\": 1ex, \"vw\": 1vw, \"vh\": 1vh, \"vmin\": 1vmin, \"vmax\": 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: log(\"Invalid unit `#{$unit}`.\");\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n\r\n@function __typed-to-number($value) {\r\n    @if type-of($value)==\"number\" {\r\n        @return $value;\r\n    }\r\n\r\n    @else if type-of($value) !=\"string\" {\r\n        $_: log(\"Value for `__typed-to-number` should be a number or a string.\");\r\n    }\r\n\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: str-slice($value, 1, 1)==\"-\";\r\n    $numbers: (\r\n        \"0\": 0,\r\n        \"1\": 1,\r\n        \"2\": 2,\r\n        \"3\": 3,\r\n        \"4\": 4,\r\n        \"5\": 5,\r\n        \"6\": 6,\r\n        \"7\": 7,\r\n        \"8\": 8,\r\n        \"9\": 9\r\n    );\r\n\r\n@for $i from if($minus, 2, 1) through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character ==\".\") {\r\n        @return __typed-to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character ==\".\" {\r\n        $digits: 1;\r\n    }\r\n\r\n    @else if $digits ==0 {\r\n        $result: $result * 10+map-get($numbers, $character);\r\n    }\r\n\r\n    @else {\r\n        $digits: $digits * 10;\r\n        $result: $result +map-get($numbers, $character) / $digits;\r\n    }\r\n}\r\n\r\n@return if($minus, -$result, $result);\r\n}\r\n\r\n// CREDIT END\r\n//\r\n// ...\r\n@function __typed-str-replace-multi($string, $searches, $replace: \"\") {\r\n    @each $search in $searches {\r\n        $string: __typed-str-replace($string, $search, $replace);\r\n    }\r\n\r\n    @return $string;\r\n}\r\n\r\n@function __typed-remove-pause-chars($str) {\r\n    @return __typed-str-replace-multi($str, map-values($__typed-pauses-chars));\r\n}\r\n\r\n@function __typed-remove-fwd-pause-chars($str) {\r\n    @return __typed-str-replace($str, map-get($__typed-pauses-chars, fwd));\r\n}\r\n\r\n@function __typed-remove-bwd-pause-chars($str) {\r\n    @return __typed-str-replace($str, map-get($__typed-pauses-chars, bwd));\r\n}\r\n\r\n@function __typed-remove-both-pause-chars($str) {\r\n    @return __typed-str-replace($str, map-get($__typed-pauses-chars, both));\r\n}\r\n\r\n@function __typed-sanitize-pause-chars($str) {\r\n    @return __typed-remove-pause-chars(__typed-inject-pauses($str));\r\n}\r\n\r\n@function __typed-inject-pauses($str, $default-mode: \"fwd\") {\r\n    @while str-index($str, \"<[\") !=null and str-index($str, \"]>\") !=null and str-index($str, \"]>\")>str-index($str, \"<[\") {\r\n        $start: str-index($str, \"<[\");\r\n        $end: str-index($str, \"]>\");\r\n        $is-fwd: str-slice($str, $start + 2, $start + 2)==\"_\";\r\n        $is-bwd: str-slice($str, $end - 1, $end - 1)==\"_\";\r\n        $is-both: $is-fwd and $is-bwd;\r\n        $space-char: if($is-both,\r\n            map-get($__typed-pauses-chars, both),\r\n            if($is-bwd,\r\n                map-get($__typed-pauses-chars, bwd),\r\n                if($is-fwd,\r\n                    map-get($__typed-pauses-chars, fwd),\r\n                    map-get($__typed-pauses-chars, $default-mode))));\r\n        $value: __typed-to-number(str-slice($str, $start + if($is-fwd, 3, 2), $end - if($is-bwd, 2, 1)));\r\n        $spaces: \"\";\r\n\r\n        @for $i from 0 to $value {\r\n            $spaces: $spaces +$space-char;\r\n        }\r\n\r\n        $str: str-slice($str, 1, $start - 1) + $spaces + str-slice($str, $end + 2, -1);\r\n    }\r\n\r\n    @return $str;\r\n}\r\n\r\n$__typed-id: 0;\r\n\r\n@mixin typed($parameters...) {\r\n    $strings: ();\r\n    $strings-styles: ();\r\n    $final-string-styles: ();\r\n    $speeds: (type: .1,\r\n        pause-typed: 2,\r\n        delete: .08,\r\n        pause-deleted: 1);\r\n    $options: (name: \"\",\r\n        iterations: infinite,\r\n        caret: true,\r\n        caret-speed: .75,\r\n        caret-width: 1ch,\r\n        caret-color: currentColor,\r\n        caret-space: .1ch,\r\n        styles: (),\r\n        end-styles: (),\r\n        delay: 1,\r\n        type-pausing: true,\r\n        type-pausing-default: \"fwd\",\r\n        prefix: \"\",\r\n        end-on: \"\",\r\n        alt-text: \"\"\r\n    );\r\n    $strings-complete: false;\r\n    $speeds-complete: false;\r\n    $options-complete: false;\r\n    $parameter-nth: 1;\r\n\r\n    @each $parameter in $parameters {\r\n        @if not $strings-complete {\r\n            @if $parameter-nth ==1 and type-of($parameter)==map {\r\n                $strings: join($strings, map-keys($parameter));\r\n                $strings-styles: join($strings-styles, map-values($parameter));\r\n                $strings-complete: true;\r\n            }\r\n\r\n            @else if type-of($parameter)==string {\r\n                $strings: append($strings, $parameter);\r\n            }\r\n\r\n            @else {\r\n                @error \"Strings are required in the formats of either separate sequential string arguments, or a single map with each string represented as the key of its own map of associated styles.\";\r\n            }\r\n\r\n            @if length($parameters)>$parameter-nth and type-of(nth($parameters, $parameter-nth + 1)) !=string {\r\n                $strings-complete: true;\r\n            }\r\n        }\r\n\r\n        @else if not $speeds-complete {\r\n            @if type-of($parameter)==map {\r\n\r\n                @each $key,\r\n                $value in $parameter {\r\n                    @if map-get($speeds, $key)==null {\r\n                        @error \"#{$key} is not a valid speed property. Accepted speed property keys are #{append(map-keys($speeds), null, comma)}.\";\r\n                    }\r\n\r\n                    @if type-of($value) !=number {\r\n                        @error \"The value #{$value} is not a number.\";\r\n                    }\r\n\r\n                    $speeds: map-merge($speeds, ($key: $value));\r\n                }\r\n            }\r\n\r\n            @else if type-of($parameter)==list {\r\n                @if length($parameter)>4 {\r\n                    @error \"The speed list argument only accepts 4 numbers when used a list.\";\r\n                }\r\n\r\n                @for $i from 1 through length($parameter) {\r\n                    @if nth($parameter, $i) !=null and type-of(nth($parameter, $i)) !=number {\r\n                        @error \"The value #{$value} is not a number.\";\r\n                    }\r\n\r\n                    @if nth($parameter, $i) !=null {\r\n                        $speeds: map-merge($speeds, (nth(map-keys($speeds), $i): nth($parameter, $i)));\r\n                    }\r\n                }\r\n            }\r\n\r\n            @else if type-of($parameter)==number {\r\n                @if $parameter <=0 {\r\n                    @error \"When passing a numeric value into the $speeds argument, it works as a multiplier and thereby requires a positive non-zero number (integer or float). To slow down the default speed, use a decimal number between 0 and 1. To speed up the default speed, use a number greater than 1. A value of 0.5 will reduce the speed by 50%, where a value of 2 will double the speed.\";\r\n                }\r\n\r\n                @each $key,\r\n                $value in $speeds {\r\n                    $speeds: map-merge($speeds, ($key: $value * (1 / $parameter)));\r\n                }\r\n            }\r\n\r\n            @else if $parameter  !=null {\r\n                @error \"The speed argument requires either a map, list, or null value.\"\r\n            }\r\n\r\n            $speeds-complete: true;\r\n        }\r\n\r\n        @else if not $options-complete {\r\n            @if $parameter  !=null {\r\n                @if type-of($parameter) !=map {\r\n                    @error \"#{$key} is not a valid options configuration map.\";\r\n                }\r\n\r\n                @each $key,\r\n                $value in $parameter {\r\n                    @if map-get($options, $key)==null {\r\n                        @error \"#{$key} is not a valid options property. Accepted options property keys are #{append(map-keys($options), null, comma)}.\";\r\n                    }\r\n\r\n                    @if $key ==iterations {\r\n                        @if $value  !=infinite and (type-of($value)==number and ($value < 0 or $value  !=round($value))) {\r\n                            @error \"The iterations value #{$value} requires a positive integer or infinite.\";\r\n                        }\r\n                    }\r\n\r\n                    @else if $key ==end-on {\r\n                        @if type-of($value)==map {\r\n                            @if length($value) !=1 {\r\n                                @error \"When using the end-on property as a map, the map must house a single value, also a map, with the map value containing the SCSS styles to apply to the end-on string.\";\r\n                            }\r\n\r\n                            @each $end-on,\r\n                            $end-on-styles in $value {\r\n                                @if type-of($end-on)==string {\r\n                                    @if $end-on ==\"\" {\r\n                                        @error \"The end-on property requires a non-empty string.\";\r\n                                    }\r\n                                }\r\n\r\n                                @else if type-of($end-on)==number {\r\n                                    @if $end-on < 0 or $end-on >length($strings) or $end-on  !=round($end-on) {\r\n                                        @error \"If using a numeric end-on property value, it must be a positive integer between 1 and the number of the strings being used.\";\r\n                                    }\r\n\r\n                                    $end-on: nth($strings, $end-on);\r\n                                }\r\n\r\n                                $final-string-styles: $end-on-styles;\r\n                                $value: $end-on;\r\n                            }\r\n                        }\r\n\r\n                        @else if type-of($value)==string {\r\n                            @if $value ==\"\" {\r\n                                @error \"The end-on property requires a non-empty string.\";\r\n                            }\r\n                        }\r\n\r\n                        @else if type-of($value)==number {\r\n                            @if $value < 0 or $value >length($strings) or $value  !=round($value) {\r\n                                @error \"If using a numeric end-on property value, it must be a positive integer between 1 and the number of the strings being used.\";\r\n                            }\r\n\r\n                            $value: nth($strings, $value);\r\n                        }\r\n                    }\r\n\r\n                    @else if $key ==caret-color {\r\n                        @if $value  !=currentColor and type-of($value) !=color {\r\n                            @error \"The caret-color property requires a value of type color, or currentColor.\";\r\n                        }\r\n                    }\r\n\r\n                    @else if ($key ==styles or $key ==end-styles) and not type-of($value) !=map {\r\n                        @if type-of($value) !=map {\r\n                            @error \"The #{$key} property requires a value of type map.\";\r\n                        }\r\n                    }\r\n\r\n                    @else if $key ==type-pausing-default {\r\n                        @if type-of($value) !=string or ($value  !=\"fwd\" and $value  !=\"bwd\" and $value  !=\"both\") {\r\n                            @error \"The #{$key} property requires a value of either \\\"fwd\\\", \\\"bwd\\\", or \\\"both\\\".\";\r\n                        }\r\n                    }\r\n\r\n                    @else if type-of($value) !=type-of(map-get($options, $key)) {\r\n                        @error \"The #{$key} value #{$value} of type #{type-of($value)} does not match the required type #{type-of(map-get($options, $key))}.\";\r\n                    }\r\n\r\n                    $options: map-merge($options, ($key: $value));\r\n                }\r\n\r\n                @if map-get($options, end-on) !=\"\" and map-get($options, iterations)==infinite {\r\n                    @warn \"The end-on string will only be rendered when iterating a finite number of times. The current animation has an iterations value of infinite so the end-on value will be ignored and never rendered.\";\r\n                }\r\n            }\r\n\r\n            $options-complete: true;\r\n        }\r\n\r\n        @else {\r\n            @error \"No additional arguments are permitted after the options object.\";\r\n        }\r\n\r\n        $parameter-nth: $parameter-nth + 1;\r\n    }\r\n\r\n    $dur-char-fwd: map-get($speeds, type);\r\n    $dur-full-gap: map-get($speeds, pause-typed);\r\n    $dur-char-bwd: map-get($speeds, delete);\r\n    $dur-done-gap: map-get($speeds, pause-deleted);\r\n    $animation-delay: map-get($options, delay);\r\n    $final-string: if(map-get($options, end-on) !=\"\", map-get($options, end-on), nth($strings, 1));\r\n    $alt-text: if(map-get($options, alt-text) !=\"\", map-get($options, alt-text), $final-string);\r\n    $caret-width: map-get($options, caret-width);\r\n    $caret-color: map-get($options, caret-color);\r\n    $caret-space: map-get($options, caret-space);\r\n    $caret-speed: map-get($options, caret-speed);\r\n    $global-styles: map-get($options, styles);\r\n    $end-styles: map-get($options, end-styles);\r\n    $type-pausing: map-get($options, type-pausing);\r\n    $type-pausing-default: map-get($options, type-pausing-default);\r\n    $prefix: map-get($options, prefix);\r\n\r\n    @if $type-pausing {\r\n        @for $nth from 1 through length($strings) {\r\n            $strings: set-nth($strings, $nth, __typed-inject-pauses(nth($strings, $nth), $type-pausing-default));\r\n        }\r\n    }\r\n\r\n    @if $caret-speed < 0s {\r\n        @error \"Delay requires a positive number value (integer or float) without units. #{$caret-speed} is less than 0.\";\r\n    }\r\n\r\n    @if $animation-delay < 0s {\r\n        @error \"Delay requires a positive number value (integer or float) without units. #{$animation-delay} is less than 0.\";\r\n    }\r\n\r\n    $iterations: map-get($options, iterations);\r\n    // initializing some values ✊🏼\r\n    $animation-name: \"\";\r\n\r\n    @if map-get($options, name) !=\"\" {\r\n        $animation-name: #{map-get($options, name)};\r\n    }\r\n\r\n    @else {\r\n        $animation-name: typed-#{$__typed-id};\r\n        $__typed-id: $__typed-id +1 !global;\r\n    }\r\n\r\n    $dur-total: 0;\r\n\r\n    @each $string in $strings {\r\n        $fwd-length: str-length(__typed-remove-bwd-pause-chars($string));\r\n        $bwd-length: str-length(__typed-remove-fwd-pause-chars($string));\r\n        $dur-total: $dur-total +$dur-char-fwd * $fwd-length +$dur-full-gap +$dur-char-bwd * $bwd-length +$dur-done-gap\r\n    }\r\n\r\n    &::before {\r\n        @include __typed-write-to-content(\"\", $alt-text, $prefix);\r\n        white-space: break-spaces;\r\n        will-change: content;\r\n\r\n        @if $iterations ==infinite {\r\n            animation: #{$animation-name} #{$dur-total}s linear #{$animation-delay}s #{$iterations} forwards;\r\n        }\r\n\r\n        @else {\r\n            animation: #{$animation-name} #{$dur-total}s linear #{$animation-delay}s #{$iterations} forwards,\r\n            #{$animation-name}-final #{str-length($final-string) * $dur-char-fwd}s linear #{$dur-total * $iterations + $animation-delay}s 1 forwards;\r\n            @include __typed-final-build-animation($dur-char-fwd, $final-string, $animation-name, $alt-text, $prefix, $end-styles, map-merge($global-styles, $final-string-styles));\r\n        }\r\n    }\r\n\r\n    @if map-get($options, caret) {\r\n        &::after {\r\n            content: \"​\";\r\n            position: relative;\r\n            display: inline-block;\r\n            padding-right: $caret-space;\r\n            border-right: #{$caret-width} solid #{$caret-color};\r\n            white-space: nowrap;\r\n            animation: #{$animation-name}-caret #{$caret-speed}s linear #{$animation-delay}s infinite forwards;\r\n        }\r\n    }\r\n\r\n    // now THIS is where the magic happens... ✨\r\n    @keyframes #{$animation-name} {\r\n        @for $i from 1 through length($strings) {\r\n            $string: nth($strings, $i);\r\n            $fwd-string: __typed-remove-bwd-pause-chars($string);\r\n            $fwd-length: str-length($fwd-string);\r\n            $bwd-string: __typed-remove-fwd-pause-chars($string);\r\n            $bwd-length: str-length($bwd-string);\r\n            $combined-length: $fwd-length +$bwd-length;\r\n\r\n            @for $j from 1 through $combined-length {\r\n                @if $j < $combined-length {\r\n\r\n                    #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)},\r\n                    #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j+1, -.001)} {\r\n                        @if $j <=$fwd-length {\r\n                            @include __typed-write-to-content(quote(#{str-slice($fwd-string, 1, $j)}), $alt-text, $prefix);\r\n                        }\r\n\r\n                        @else {\r\n                            @include __typed-write-to-content(quote(#{str-slice($bwd-string, 1, $bwd-length - ($j - $fwd-length))}), $alt-text, $prefix);\r\n                        }\r\n\r\n                        @include __typed-spread-styles($strings-styles, $i, $global-styles);\r\n                    }\r\n                }\r\n\r\n                @else {\r\n                    @if $i < length($strings) {\r\n\r\n                        #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)},\r\n                        #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i+1, 1, -.001)} {\r\n                            @include __typed-write-to-content(\"\", $alt-text, $prefix);\r\n                            @include __typed-spread-styles($strings-styles, $i, $global-styles);\r\n                        }\r\n                    }\r\n\r\n                    @else {\r\n\r\n                        #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)},\r\n                        100% {\r\n                            @include __typed-write-to-content(\"\", $alt-text, $prefix);\r\n                            @include __typed-spread-styles($strings-styles, $i, $global-styles);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @if map-get($options, caret) {\r\n        @keyframes #{$animation-name}-caret {\r\n            75% {\r\n                border-color: transparent;\r\n            }\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}